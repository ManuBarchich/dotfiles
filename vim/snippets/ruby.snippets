snippet #!
	#!/usr/bin/env ruby

snippet req
	require '${1}'${2}

# methods
snippet def
	def ${1:method_name}
		${2}
	end
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet defmm
	def method_missing(method, *args, &blok)
		${1}
	end

# case .. when .. end
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}

# if .. else .. end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}

# Class
snippet cla class .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}

		def initialize(${2:args})
			${3}
		end

	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}

		def initialize(${3:args})
			${4}
		end

	end
snippet cla ClassName = Struct .. do .. end
	${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} = Struct.new(:${2:attr_names}) do

		def ${3:method_name}
			${4}
		end

	end
snippet cla class << self .. end
	class << ${1:self}

		${2}

	end

# Iternators
snippet dow
	downto(${1:0}) {|${2:n}| ${3} }
snippet tim
	times {|${1:n}| ${2} }
snippet upt
	upto(${1:1.0/0.0}) {|${2:n}| ${3} }
snippet ea
	each {|${1:value}| ${2} }
snippet ead
	each do |${1:value}|
		${2}
	end
snippet eai
	each_index {|${1:index}| ${2} }
snippet eaid
	each_index do |${1:index}|
		${2}
	end
snippet eak
	each_key {|${1:key}| ${2} }
snippet eakd
	each_key do |${1:key}|
		${2}
	end
snippet eav
	each_value {|${1:value}| ${2} }
snippet eavd
	each_value do |${1:value}|
		${2}
	end
snippet eawi
	each_with_index {|${1:value}, ${2:index}| ${3} }
snippet eawid
	each_with_index do |${1:value}, ${2:index}|
		${3}
	end
snippet all
	all? {|${1:value}| ${2} }
snippet any
	any? {|${1:value}| ${2} }

# RSpec
snippet it
	it '${1:spec_name}' do
		${2}
	end
snippet desc
	describe ${1:class_name} do
		${2}
	end
snippet cont
	context '${1:message}' do
		${2}
	end
snippet bef
	before(:${1:each}) do
		${2}
	end
snippet aft
	after(:${1:each}) do
		${2}
	end
snippet let
	let(:${1:method_name}) { ${2} }
snippet letd
	let(:${1:method_name}) do
		${2}
	end

