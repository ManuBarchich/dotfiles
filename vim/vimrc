set nocompatible                              " choose no compatibility with legacy vi
source ~/.vim/bundle.vim                      " load plugin - should be load first

"" function to setup wrapping
function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

"" Set map leader
let mapleader=','

"" Set default encoding
set encoding=utf-8

"" Basic styles configuration
syntax enable                                 " syntax highlighting on
set background=dark
color railscasts2
set number                                    " show line number
set ruler                                     " show the cursor position all the time
set showcmd                                   " display incomplete commands
set cursorline                                " highlight cursor line

"" Whitespace
set nowrap                                    " don't wrap lines
set tabstop=2                                 " a tab is two spaces
set shiftwidth=2                              " an autoindent (with <<) is two spaces
set expandtab                                 " use spaces, not tabs
set list                                      " Show invisible characters
set backspace=indent,eol,start                " backspace through everything in insert mode

" List chars
set listchars=""                              " Reset the listchars
set listchars=tab:\ \                         " show tab as space
set listchars+=trail:.                        " show trailing spaces as dots
set listchars+=extends:>                      " The character to show in the last column when wrap is
                                              " off and the line continues beyond the right of the screen
set listchars+=precedes:<                     " The character to show in the last column when wrap is
                                              " off and the line continues beyond the right of the screen
"" Searching
set hlsearch                                  " highlight matches
set incsearch                                 " incremental searching
set ignorecase                                " searches are case insensitive...
set smartcase                                 " ... unless they contain at least one capital letter
nnoremap <CR> :nohlsearch<CR>                 " clear the search buffer when hitting return

"" Match filetype
filetype plugin indent on                     " Automatically detect file types
if has('autocmd')
  " special ruby files
  au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby

  " json file is javascript file
  au BufNewFile,BufRead *.json set ft=javascript

  " match markdown files & setup to wrap text
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " make file use real tab
  au FileType make set noexpandtab

  " remember last location in file, but not for commit messages.
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

"" Backup & Swap
set backup
set backupdir=~/.vim/backup                   " where to put backup files.
set directory=~/.vim/swap                     " where to put swap files.

"" Status line
if has('statusline') && !&cp
  set laststatus=2                            " always show the status bar

  set statusline=%f\ %m\ %r                   " filename / modified flag / readonly flag
  set statusline+=\ %{fugitive#statusline()}  " git information by fugitive
  set statusline+=\ Line:%l/%L[%p%%]          " line number
  set statusline+=\ Col:%v                    " column number
  set statusline+=\ Buf:#%n                   " buffer number
  set statusline+=[%b][0x%B]                  " value of byte under cursor / and in hexadecimal
endif

"" Commentary
vmap <Leader>/ <Plug>Commentary
nmap <Leader>/ <Plug>CommentaryLine

"" Command-T
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>
map <leader>gg :vertical botright split Gemfile<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

